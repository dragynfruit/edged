// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod platforms {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod darwinn {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod api {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PERFORMANCE_EXPECTATION: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PERFORMANCE_EXPECTATION: i32 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PERFORMANCE_EXPECTATION: [PerformanceExpectation; 4] = [
  PerformanceExpectation::Low,
  PerformanceExpectation::Medium,
  PerformanceExpectation::High,
  PerformanceExpectation::Max,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PerformanceExpectation(pub i32);
#[allow(non_upper_case_globals)]
impl PerformanceExpectation {
  pub const Low: Self = Self(0);
  pub const Medium: Self = Self(1);
  pub const High: Self = Self(2);
  pub const Max: Self = Self(3);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Low,
    Self::Medium,
    Self::High,
    Self::Max,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Low => Some("Low"),
      Self::Medium => Some("Medium"),
      Self::High => Some("High"),
      Self::Max => Some("Max"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PerformanceExpectation {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PerformanceExpectation {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PerformanceExpectation {
    type Output = PerformanceExpectation;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PerformanceExpectation {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PerformanceExpectation {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PerformanceExpectation {}
pub enum DriverUsbOptionsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DriverUsbOptions<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DriverUsbOptions<'a> {
  type Inner = DriverUsbOptions<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DriverUsbOptions<'a> {
  pub const VT_DFU_FIRMWARE: flatbuffers::VOffsetT = 4;
  pub const VT_ALWAYS_DFU: flatbuffers::VOffsetT = 6;
  pub const VT_HAS_FAIL_IF_SLOWER_THAN_SUPERSPEED: flatbuffers::VOffsetT = 8;
  pub const VT_FAIL_IF_SLOWER_THAN_SUPERSPEED: flatbuffers::VOffsetT = 10;
  pub const VT_HAS_FORCE_LARGEST_BULK_IN_CHUNK_SIZE: flatbuffers::VOffsetT = 12;
  pub const VT_FORCE_LARGEST_BULK_IN_CHUNK_SIZE: flatbuffers::VOffsetT = 14;
  pub const VT_HAS_ENABLE_OVERLAPPING_BULK_IN_AND_OUT: flatbuffers::VOffsetT = 16;
  pub const VT_ENABLE_OVERLAPPING_BULK_IN_AND_OUT: flatbuffers::VOffsetT = 18;
  pub const VT_HAS_ENABLE_QUEUED_BULK_IN_REQUESTS: flatbuffers::VOffsetT = 20;
  pub const VT_ENABLE_QUEUED_BULK_IN_REQUESTS: flatbuffers::VOffsetT = 22;
  pub const VT_HAS_BULK_IN_QUEUE_CAPACITY: flatbuffers::VOffsetT = 24;
  pub const VT_BULK_IN_QUEUE_CAPACITY: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DriverUsbOptions { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DriverUsbOptionsArgs<'args>
  ) -> flatbuffers::WIPOffset<DriverUsbOptions<'bldr>> {
    let mut builder = DriverUsbOptionsBuilder::new(_fbb);
    builder.add_bulk_in_queue_capacity(args.bulk_in_queue_capacity);
    if let Some(x) = args.dfu_firmware { builder.add_dfu_firmware(x); }
    builder.add_has_bulk_in_queue_capacity(args.has_bulk_in_queue_capacity);
    builder.add_enable_queued_bulk_in_requests(args.enable_queued_bulk_in_requests);
    builder.add_has_enable_queued_bulk_in_requests(args.has_enable_queued_bulk_in_requests);
    builder.add_enable_overlapping_bulk_in_and_out(args.enable_overlapping_bulk_in_and_out);
    builder.add_has_enable_overlapping_bulk_in_and_out(args.has_enable_overlapping_bulk_in_and_out);
    builder.add_force_largest_bulk_in_chunk_size(args.force_largest_bulk_in_chunk_size);
    builder.add_has_force_largest_bulk_in_chunk_size(args.has_force_largest_bulk_in_chunk_size);
    builder.add_fail_if_slower_than_superspeed(args.fail_if_slower_than_superspeed);
    builder.add_has_fail_if_slower_than_superspeed(args.has_fail_if_slower_than_superspeed);
    builder.add_always_dfu(args.always_dfu);
    builder.finish()
  }


  #[inline]
  pub fn dfu_firmware(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DriverUsbOptions::VT_DFU_FIRMWARE, None)}
  }
  #[inline]
  pub fn always_dfu(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_ALWAYS_DFU, Some(true)).unwrap()}
  }
  #[inline]
  pub fn has_fail_if_slower_than_superspeed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_HAS_FAIL_IF_SLOWER_THAN_SUPERSPEED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn fail_if_slower_than_superspeed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_FAIL_IF_SLOWER_THAN_SUPERSPEED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn has_force_largest_bulk_in_chunk_size(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_HAS_FORCE_LARGEST_BULK_IN_CHUNK_SIZE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn force_largest_bulk_in_chunk_size(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_FORCE_LARGEST_BULK_IN_CHUNK_SIZE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn has_enable_overlapping_bulk_in_and_out(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_HAS_ENABLE_OVERLAPPING_BULK_IN_AND_OUT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn enable_overlapping_bulk_in_and_out(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_ENABLE_OVERLAPPING_BULK_IN_AND_OUT, Some(true)).unwrap()}
  }
  #[inline]
  pub fn has_enable_queued_bulk_in_requests(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_HAS_ENABLE_QUEUED_BULK_IN_REQUESTS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn enable_queued_bulk_in_requests(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_ENABLE_QUEUED_BULK_IN_REQUESTS, Some(true)).unwrap()}
  }
  #[inline]
  pub fn has_bulk_in_queue_capacity(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DriverUsbOptions::VT_HAS_BULK_IN_QUEUE_CAPACITY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn bulk_in_queue_capacity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DriverUsbOptions::VT_BULK_IN_QUEUE_CAPACITY, Some(32)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DriverUsbOptions<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dfu_firmware", Self::VT_DFU_FIRMWARE, false)?
     .visit_field::<bool>("always_dfu", Self::VT_ALWAYS_DFU, false)?
     .visit_field::<bool>("has_fail_if_slower_than_superspeed", Self::VT_HAS_FAIL_IF_SLOWER_THAN_SUPERSPEED, false)?
     .visit_field::<bool>("fail_if_slower_than_superspeed", Self::VT_FAIL_IF_SLOWER_THAN_SUPERSPEED, false)?
     .visit_field::<bool>("has_force_largest_bulk_in_chunk_size", Self::VT_HAS_FORCE_LARGEST_BULK_IN_CHUNK_SIZE, false)?
     .visit_field::<bool>("force_largest_bulk_in_chunk_size", Self::VT_FORCE_LARGEST_BULK_IN_CHUNK_SIZE, false)?
     .visit_field::<bool>("has_enable_overlapping_bulk_in_and_out", Self::VT_HAS_ENABLE_OVERLAPPING_BULK_IN_AND_OUT, false)?
     .visit_field::<bool>("enable_overlapping_bulk_in_and_out", Self::VT_ENABLE_OVERLAPPING_BULK_IN_AND_OUT, false)?
     .visit_field::<bool>("has_enable_queued_bulk_in_requests", Self::VT_HAS_ENABLE_QUEUED_BULK_IN_REQUESTS, false)?
     .visit_field::<bool>("enable_queued_bulk_in_requests", Self::VT_ENABLE_QUEUED_BULK_IN_REQUESTS, false)?
     .visit_field::<bool>("has_bulk_in_queue_capacity", Self::VT_HAS_BULK_IN_QUEUE_CAPACITY, false)?
     .visit_field::<i32>("bulk_in_queue_capacity", Self::VT_BULK_IN_QUEUE_CAPACITY, false)?
     .finish();
    Ok(())
  }
}
pub struct DriverUsbOptionsArgs<'a> {
    pub dfu_firmware: Option<flatbuffers::WIPOffset<&'a str>>,
    pub always_dfu: bool,
    pub has_fail_if_slower_than_superspeed: bool,
    pub fail_if_slower_than_superspeed: bool,
    pub has_force_largest_bulk_in_chunk_size: bool,
    pub force_largest_bulk_in_chunk_size: bool,
    pub has_enable_overlapping_bulk_in_and_out: bool,
    pub enable_overlapping_bulk_in_and_out: bool,
    pub has_enable_queued_bulk_in_requests: bool,
    pub enable_queued_bulk_in_requests: bool,
    pub has_bulk_in_queue_capacity: bool,
    pub bulk_in_queue_capacity: i32,
}
impl<'a> Default for DriverUsbOptionsArgs<'a> {
  #[inline]
  fn default() -> Self {
    DriverUsbOptionsArgs {
      dfu_firmware: None,
      always_dfu: true,
      has_fail_if_slower_than_superspeed: false,
      fail_if_slower_than_superspeed: false,
      has_force_largest_bulk_in_chunk_size: false,
      force_largest_bulk_in_chunk_size: false,
      has_enable_overlapping_bulk_in_and_out: false,
      enable_overlapping_bulk_in_and_out: true,
      has_enable_queued_bulk_in_requests: false,
      enable_queued_bulk_in_requests: true,
      has_bulk_in_queue_capacity: false,
      bulk_in_queue_capacity: 32,
    }
  }
}

pub struct DriverUsbOptionsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DriverUsbOptionsBuilder<'a, 'b> {
  #[inline]
  pub fn add_dfu_firmware(&mut self, dfu_firmware: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DriverUsbOptions::VT_DFU_FIRMWARE, dfu_firmware);
  }
  #[inline]
  pub fn add_always_dfu(&mut self, always_dfu: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_ALWAYS_DFU, always_dfu, true);
  }
  #[inline]
  pub fn add_has_fail_if_slower_than_superspeed(&mut self, has_fail_if_slower_than_superspeed: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_HAS_FAIL_IF_SLOWER_THAN_SUPERSPEED, has_fail_if_slower_than_superspeed, false);
  }
  #[inline]
  pub fn add_fail_if_slower_than_superspeed(&mut self, fail_if_slower_than_superspeed: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_FAIL_IF_SLOWER_THAN_SUPERSPEED, fail_if_slower_than_superspeed, false);
  }
  #[inline]
  pub fn add_has_force_largest_bulk_in_chunk_size(&mut self, has_force_largest_bulk_in_chunk_size: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_HAS_FORCE_LARGEST_BULK_IN_CHUNK_SIZE, has_force_largest_bulk_in_chunk_size, false);
  }
  #[inline]
  pub fn add_force_largest_bulk_in_chunk_size(&mut self, force_largest_bulk_in_chunk_size: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_FORCE_LARGEST_BULK_IN_CHUNK_SIZE, force_largest_bulk_in_chunk_size, false);
  }
  #[inline]
  pub fn add_has_enable_overlapping_bulk_in_and_out(&mut self, has_enable_overlapping_bulk_in_and_out: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_HAS_ENABLE_OVERLAPPING_BULK_IN_AND_OUT, has_enable_overlapping_bulk_in_and_out, false);
  }
  #[inline]
  pub fn add_enable_overlapping_bulk_in_and_out(&mut self, enable_overlapping_bulk_in_and_out: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_ENABLE_OVERLAPPING_BULK_IN_AND_OUT, enable_overlapping_bulk_in_and_out, true);
  }
  #[inline]
  pub fn add_has_enable_queued_bulk_in_requests(&mut self, has_enable_queued_bulk_in_requests: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_HAS_ENABLE_QUEUED_BULK_IN_REQUESTS, has_enable_queued_bulk_in_requests, false);
  }
  #[inline]
  pub fn add_enable_queued_bulk_in_requests(&mut self, enable_queued_bulk_in_requests: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_ENABLE_QUEUED_BULK_IN_REQUESTS, enable_queued_bulk_in_requests, true);
  }
  #[inline]
  pub fn add_has_bulk_in_queue_capacity(&mut self, has_bulk_in_queue_capacity: bool) {
    self.fbb_.push_slot::<bool>(DriverUsbOptions::VT_HAS_BULK_IN_QUEUE_CAPACITY, has_bulk_in_queue_capacity, false);
  }
  #[inline]
  pub fn add_bulk_in_queue_capacity(&mut self, bulk_in_queue_capacity: i32) {
    self.fbb_.push_slot::<i32>(DriverUsbOptions::VT_BULK_IN_QUEUE_CAPACITY, bulk_in_queue_capacity, 32);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DriverUsbOptionsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DriverUsbOptionsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DriverUsbOptions<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DriverUsbOptions<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DriverUsbOptions");
      ds.field("dfu_firmware", &self.dfu_firmware());
      ds.field("always_dfu", &self.always_dfu());
      ds.field("has_fail_if_slower_than_superspeed", &self.has_fail_if_slower_than_superspeed());
      ds.field("fail_if_slower_than_superspeed", &self.fail_if_slower_than_superspeed());
      ds.field("has_force_largest_bulk_in_chunk_size", &self.has_force_largest_bulk_in_chunk_size());
      ds.field("force_largest_bulk_in_chunk_size", &self.force_largest_bulk_in_chunk_size());
      ds.field("has_enable_overlapping_bulk_in_and_out", &self.has_enable_overlapping_bulk_in_and_out());
      ds.field("enable_overlapping_bulk_in_and_out", &self.enable_overlapping_bulk_in_and_out());
      ds.field("has_enable_queued_bulk_in_requests", &self.has_enable_queued_bulk_in_requests());
      ds.field("enable_queued_bulk_in_requests", &self.enable_queued_bulk_in_requests());
      ds.field("has_bulk_in_queue_capacity", &self.has_bulk_in_queue_capacity());
      ds.field("bulk_in_queue_capacity", &self.bulk_in_queue_capacity());
      ds.finish()
  }
}
pub enum DriverOptionsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DriverOptions<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DriverOptions<'a> {
  type Inner = DriverOptions<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DriverOptions<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_USB: flatbuffers::VOffsetT = 6;
  pub const VT_VERBOSITY: flatbuffers::VOffsetT = 8;
  pub const VT_PERFORMANCE_EXPECTATION: flatbuffers::VOffsetT = 10;
  pub const VT_PUBLIC_KEY: flatbuffers::VOffsetT = 12;
  pub const VT_WATCHDOG_TIMEOUT_NS: flatbuffers::VOffsetT = 14;
  pub const VT_TPU_FREQUENCY_HZ: flatbuffers::VOffsetT = 16;
  pub const VT_MAX_SCHEDULED_WORK_NS: flatbuffers::VOffsetT = 18;
  pub const VT_HOST_TO_TPU_BPS: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DriverOptions { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DriverOptionsArgs<'args>
  ) -> flatbuffers::WIPOffset<DriverOptions<'bldr>> {
    let mut builder = DriverOptionsBuilder::new(_fbb);
    builder.add_host_to_tpu_bps(args.host_to_tpu_bps);
    builder.add_max_scheduled_work_ns(args.max_scheduled_work_ns);
    builder.add_tpu_frequency_hz(args.tpu_frequency_hz);
    builder.add_watchdog_timeout_ns(args.watchdog_timeout_ns);
    if let Some(x) = args.public_key { builder.add_public_key(x); }
    builder.add_performance_expectation(args.performance_expectation);
    builder.add_verbosity(args.verbosity);
    if let Some(x) = args.usb { builder.add_usb(x); }
    builder.add_version(args.version);
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DriverOptions::VT_VERSION, Some(1)).unwrap()}
  }
  #[inline]
  pub fn usb(&self) -> Option<DriverUsbOptions<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<DriverUsbOptions>>(DriverOptions::VT_USB, None)}
  }
  #[inline]
  pub fn verbosity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DriverOptions::VT_VERBOSITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn performance_expectation(&self) -> PerformanceExpectation {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PerformanceExpectation>(DriverOptions::VT_PERFORMANCE_EXPECTATION, Some(PerformanceExpectation::High)).unwrap()}
  }
  #[inline]
  pub fn public_key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DriverOptions::VT_PUBLIC_KEY, None)}
  }
  #[inline]
  pub fn watchdog_timeout_ns(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DriverOptions::VT_WATCHDOG_TIMEOUT_NS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn tpu_frequency_hz(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DriverOptions::VT_TPU_FREQUENCY_HZ, Some(-1)).unwrap()}
  }
  #[inline]
  pub fn max_scheduled_work_ns(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DriverOptions::VT_MAX_SCHEDULED_WORK_NS, Some(-1)).unwrap()}
  }
  #[inline]
  pub fn host_to_tpu_bps(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DriverOptions::VT_HOST_TO_TPU_BPS, Some(-1)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DriverOptions<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<DriverUsbOptions>>("usb", Self::VT_USB, false)?
     .visit_field::<i32>("verbosity", Self::VT_VERBOSITY, false)?
     .visit_field::<PerformanceExpectation>("performance_expectation", Self::VT_PERFORMANCE_EXPECTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("public_key", Self::VT_PUBLIC_KEY, false)?
     .visit_field::<i64>("watchdog_timeout_ns", Self::VT_WATCHDOG_TIMEOUT_NS, false)?
     .visit_field::<i64>("tpu_frequency_hz", Self::VT_TPU_FREQUENCY_HZ, false)?
     .visit_field::<i64>("max_scheduled_work_ns", Self::VT_MAX_SCHEDULED_WORK_NS, false)?
     .visit_field::<i64>("host_to_tpu_bps", Self::VT_HOST_TO_TPU_BPS, false)?
     .finish();
    Ok(())
  }
}
pub struct DriverOptionsArgs<'a> {
    pub version: i32,
    pub usb: Option<flatbuffers::WIPOffset<DriverUsbOptions<'a>>>,
    pub verbosity: i32,
    pub performance_expectation: PerformanceExpectation,
    pub public_key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub watchdog_timeout_ns: i64,
    pub tpu_frequency_hz: i64,
    pub max_scheduled_work_ns: i64,
    pub host_to_tpu_bps: i64,
}
impl<'a> Default for DriverOptionsArgs<'a> {
  #[inline]
  fn default() -> Self {
    DriverOptionsArgs {
      version: 1,
      usb: None,
      verbosity: 0,
      performance_expectation: PerformanceExpectation::High,
      public_key: None,
      watchdog_timeout_ns: 0,
      tpu_frequency_hz: -1,
      max_scheduled_work_ns: -1,
      host_to_tpu_bps: -1,
    }
  }
}

pub struct DriverOptionsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DriverOptionsBuilder<'a, 'b> {
  #[inline]
  pub fn add_version(&mut self, version: i32) {
    self.fbb_.push_slot::<i32>(DriverOptions::VT_VERSION, version, 1);
  }
  #[inline]
  pub fn add_usb(&mut self, usb: flatbuffers::WIPOffset<DriverUsbOptions<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<DriverUsbOptions>>(DriverOptions::VT_USB, usb);
  }
  #[inline]
  pub fn add_verbosity(&mut self, verbosity: i32) {
    self.fbb_.push_slot::<i32>(DriverOptions::VT_VERBOSITY, verbosity, 0);
  }
  #[inline]
  pub fn add_performance_expectation(&mut self, performance_expectation: PerformanceExpectation) {
    self.fbb_.push_slot::<PerformanceExpectation>(DriverOptions::VT_PERFORMANCE_EXPECTATION, performance_expectation, PerformanceExpectation::High);
  }
  #[inline]
  pub fn add_public_key(&mut self, public_key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DriverOptions::VT_PUBLIC_KEY, public_key);
  }
  #[inline]
  pub fn add_watchdog_timeout_ns(&mut self, watchdog_timeout_ns: i64) {
    self.fbb_.push_slot::<i64>(DriverOptions::VT_WATCHDOG_TIMEOUT_NS, watchdog_timeout_ns, 0);
  }
  #[inline]
  pub fn add_tpu_frequency_hz(&mut self, tpu_frequency_hz: i64) {
    self.fbb_.push_slot::<i64>(DriverOptions::VT_TPU_FREQUENCY_HZ, tpu_frequency_hz, -1);
  }
  #[inline]
  pub fn add_max_scheduled_work_ns(&mut self, max_scheduled_work_ns: i64) {
    self.fbb_.push_slot::<i64>(DriverOptions::VT_MAX_SCHEDULED_WORK_NS, max_scheduled_work_ns, -1);
  }
  #[inline]
  pub fn add_host_to_tpu_bps(&mut self, host_to_tpu_bps: i64) {
    self.fbb_.push_slot::<i64>(DriverOptions::VT_HOST_TO_TPU_BPS, host_to_tpu_bps, -1);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DriverOptionsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DriverOptionsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DriverOptions<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DriverOptions<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DriverOptions");
      ds.field("version", &self.version());
      ds.field("usb", &self.usb());
      ds.field("verbosity", &self.verbosity());
      ds.field("performance_expectation", &self.performance_expectation());
      ds.field("public_key", &self.public_key());
      ds.field("watchdog_timeout_ns", &self.watchdog_timeout_ns());
      ds.field("tpu_frequency_hz", &self.tpu_frequency_hz());
      ds.field("max_scheduled_work_ns", &self.max_scheduled_work_ns());
      ds.field("host_to_tpu_bps", &self.host_to_tpu_bps());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DriverOptions`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_driver_options_unchecked`.
pub fn root_as_driver_options(buf: &[u8]) -> Result<DriverOptions, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DriverOptions>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DriverOptions` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_driver_options_unchecked`.
pub fn size_prefixed_root_as_driver_options(buf: &[u8]) -> Result<DriverOptions, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DriverOptions>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DriverOptions` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_driver_options_unchecked`.
pub fn root_as_driver_options_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DriverOptions<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DriverOptions<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DriverOptions` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_driver_options_unchecked`.
pub fn size_prefixed_root_as_driver_options_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DriverOptions<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DriverOptions<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DriverOptions and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DriverOptions`.
pub unsafe fn root_as_driver_options_unchecked(buf: &[u8]) -> DriverOptions {
  flatbuffers::root_unchecked::<DriverOptions>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DriverOptions and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DriverOptions`.
pub unsafe fn size_prefixed_root_as_driver_options_unchecked(buf: &[u8]) -> DriverOptions {
  flatbuffers::size_prefixed_root_unchecked::<DriverOptions>(buf)
}
#[inline]
pub fn finish_driver_options_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<DriverOptions<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_driver_options_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<DriverOptions<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod api
}  // pub mod darwinn
}  // pub mod platforms

